var ontlogin=function(e){"use strict";var r,t,n,s,o,i;e.Version=void 0,(e.Version||(e.Version={})).Version1="1.0",e.MessageType=void 0,(r=e.MessageType||(e.MessageType={})).ClientHello="ClientHello",r.ServerHello="ServerHello",r.ClientResponse="ClientResponse",e.Action=void 0,(t=e.Action||(e.Action={}))[t.IdAuth=0]="IdAuth",t[t.IdAuthAndVcAuth=1]="IdAuthAndVcAuth",e.ErrorEnum=void 0,(n=e.ErrorEnum||(e.ErrorEnum={})).VersionNotSupport="ERR_WRONG_VERSION",n.TypeNotSupport="ERR_TYPE_NOT_SUPPORTED",n.ActionNotSupport="ERR_ACTION_NOT_SUPPORTED",n.UnknownError="ERR_UNDEFINED",n.UserCanceled="USER_CANCELED",e.QrStatus=void 0,(s=e.QrStatus||(e.QrStatus={}))[s.Pending=0]="Pending",s[s.Success=1]="Success",s[s.Fail=2]="Fail",e.RequestUrl=void 0,(o=e.RequestUrl||(e.RequestUrl={})).getQR="https://login.ont.id/scan/qr-code/challenge",o.getQRResult="https://login.ont.id/scan/qr-code/result",e.RequestUrlTest=void 0,(i=e.RequestUrlTest||(e.RequestUrlTest={})).getQR="http://172.168.3.240:31843/qr-code/challenge",i.getQRResult="http://172.168.3.240:31843/qr-code/result";const a=async(e,r,t)=>fetch(e,{method:"post",body:JSON.stringify(r),headers:{Accept:"application/json","Content-Type":"application/json"},signal:t}).then((e=>e.json())),l=async(e,r,t)=>fetch(`${e}/${r}`,{signal:t}).then((e=>e.json())),u=e=>new Promise((r=>{setTimeout((()=>{r()}),e)}));let c=!1,d=null;const p=async(r,t=1e3,n)=>{if(c)throw c=!1,d=null,new Error(e.ErrorEnum.UserCanceled);try{d=new AbortController;const{result:s,error:o,desc:i}=await l(n||e.RequestUrl.getQRResult,r,d.signal);if(o)throw new Error(i);if(s.state===e.QrStatus.Pending)return await u(t),p(r);if(s.state===e.QrStatus.Success)return JSON.parse(s.clientResponse);throw new Error(s.error)}catch(r){if("AbortError"===r.name)throw c=!1,d=null,new Error(e.ErrorEnum.UserCanceled);throw r}};return e.cancelQueryQRResult=()=>{c=!0,d&&d.abort()},e.createAuthRequest=(r=e.Action.IdAuth)=>({ver:e.Version.Version1,type:e.MessageType.ClientHello,action:r}),e.createSignData=(e,r)=>({type:"ClientResponse",server:{name:e.server.name,url:e.server.url,...e.server.did?{did:e.server.did}:{}},nonce:e.nonce,did:r,created:Math.floor(Date.now()/1e3)}),e.createSignData712=(e,r)=>({types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"}],ClientResponseMsg:[{name:"type",type:"string"},{name:"serverName",type:"string"},{name:"serverUrl",type:"string"},{name:"serverDid",type:"string"},{name:"nonce",type:"string"},{name:"did",type:"string"},{name:"created",type:"uint256"}]},primaryType:"ClientResponseMsg",domain:{name:"ontlogin",version:"v1.0.0"},message:{type:"ClientResponse",serverName:e.server.name,serverUrl:e.server.url,serverDid:e.server.did,nonce:e.nonce,did:r,created:Math.floor(Date.now()/1e3)}}),e.getRequest=l,e.postRequest=a,e.queryQRResult=p,e.requestQR=async(r,t)=>{const{result:n,error:s,desc:o}=await a(t||e.RequestUrl.getQR,r);if(s)throw new Error(o);return{id:n.id,text:n.qrCode}},e.wait=u,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
