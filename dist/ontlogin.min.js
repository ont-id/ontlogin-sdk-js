var ontlogin=function(e){"use strict";var r,t,n,o,s;e.Version=void 0,(e.Version||(e.Version={})).Version1="1.0",e.MessageType=void 0,(r=e.MessageType||(e.MessageType={})).ClientHello="ClientHello",r.ServerHello="ServerHello",r.ClientResponse="ClientResponse",e.Action=void 0,(t=e.Action||(e.Action={}))[t.IdAuth=0]="IdAuth",t[t.IdAuthAndVcAuth=1]="IdAuthAndVcAuth",e.ErrorEnum=void 0,(n=e.ErrorEnum||(e.ErrorEnum={})).VersionNotSupport="ERR_WRONG_VERSION",n.TypeNotSupport="ERR_TYPE_NOT_SUPPORTED",n.ActionNotSupport="ERR_ACTION_NOT_SUPPORTED",n.UnknownError="ERR_UNDEFINED",n.UserCanceled="USER_CANCELED",e.QrStatus=void 0,(o=e.QrStatus||(e.QrStatus={}))[o.Pending=0]="Pending",o[o.Success=1]="Success",o[o.Fail=2]="Fail",e.RequestUrl=void 0,(s=e.RequestUrl||(e.RequestUrl={})).getQR="http://172.168.3.240:31843/qr-code/challenge",s.getQRResult="http://172.168.3.240:31843/qr-code/result";const i=async(e,r,t)=>fetch(e,{method:"post",body:JSON.stringify(r),headers:{Accept:"application/json","Content-Type":"application/json"},signal:t}).then((e=>e.json())),l=async(e,r,t)=>fetch(`${e}/${r}`,{signal:t}).then((e=>e.json())),u=e=>new Promise((r=>{setTimeout((()=>{r()}),e)}));let a=!1,c=null;const d=async(r,t=1e3)=>{if(a)throw a=!1,c=null,new Error(e.ErrorEnum.UserCanceled);try{c=new AbortController;const{result:n,error:o,desc:s}=await l(e.RequestUrl.getQRResult,r,c.signal);if(o)throw new Error(s);if(n.state===e.QrStatus.Pending)return await u(t),d(r);if(n.state===e.QrStatus.Success)return JSON.parse(n.clientResponse);throw new Error(n.error)}catch(r){if("AbortError"===r.name)throw a=!1,c=null,new Error(e.ErrorEnum.UserCanceled);throw r}};return e.cancelQueryQRResult=()=>{a=!0,c&&c.abort()},e.createAuthRequest=(r=e.Action.IdAuth)=>({ver:e.Version.Version1,type:e.MessageType.ClientHello,action:r}),e.createSignData=(e,r)=>({type:"ClientResponse",server:{name:e.server.name,url:e.server.url,...e.server.did?{did:e.server.did}:{}},nonce:e.nonce,did:r,created:Math.floor(Date.now()/1e3)}),e.getRequest=l,e.postRequest=i,e.queryQRResult=d,e.requestQR=async r=>{const{result:t,error:n,desc:o}=await i(e.RequestUrl.getQR,r);if(n)throw new Error(o);return{id:t.id,text:t.qrCode}},e.wait=u,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
